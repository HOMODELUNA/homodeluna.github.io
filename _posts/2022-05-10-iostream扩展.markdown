---
layout: post
title:  "iostream扩展"
date:   2022-05-10 20:43:00 +0800
categories: language C++
---
`std::iostream` 提供了一个对于输入输出的统一格式,他可以用来处理各种各样的输入输出,从基本的IO:`istream` 和`ostream`, 文件IO:`fstream`,字符串IO:`stringstream`到管道IO,以至于网络IO的种种东西,虽然它的性能常常被人诟病,但是其良好的设计使我们能够容易地扩展它.



一个`iostream`由如下几个功能决定

1. 一个(或两个)缓冲区,用于缓冲输入或输出
2. 一个`underflow`方法,用于当缓冲区空了的时候从外部读入
3. 一个`overflow`方法,用于缓冲区满了的时候送出去
4. (可选)一个`sync`方法,用于手动清空缓冲区

接下来我们试着包装一个TCPstream,实现它的这些方法.

为了提供更灵活的输入输出控制，并让其支持更多的类型和格式，C++ 引入了输入输出流。


```cpp
//TCPsteam.h
#pragma once
// 原文 https://murphypei.github.io/blog/2019/01/cpp-custom-iostream



#include<iostream>
#include<cstddef>
#if defined(_WIN32) || defined(_WIN64)
#include "winsock2.h"
using ISocket =SOCKET;
#else //linux
#include <sys/socket.h>
using ISocket = int;
#endif

namespace TCP{

// 我们都知道每一个输入输出流都会绑定相应的 buffer，也就是输入输出缓冲区。
// 它负责提供缓冲功能，并提供“顺序读取设备”的抽象，
// 也就是把数据刷新到外部设备中或者从外部设备中读取数据。
// 而具体的流可以只负责进行格式化或者完成其他类型的工作。
class TcpStreamBuf : public std::streambuf{
public:
    TcpStreamBuf(ISocket _socket,size_t _buf_size);
    ~TcpStreamBuf();
    int overflow(int c)override;//这就是我们要重写的三个函数
    int underflow()override;
    int sync()override;
private:
    const size_t buf_size_;
    ISocket socket_;
    char* pbuf_,*gbuf_;
};

class TCPstream : public std::iostream {
public:
    TCPstream(ISocket socket, size_t buf_size);
    ~TCPstream(){};

private:
    ISocket socket_;
    const size_t buf_size_;
};



#pragma region Implementation

#include <cassert>

#if defined(_WIN32) || defined(_WIN64)

#pragma comment(lib,"ws2_32.lib")  
#warning "Trying to link ws2_32.lib"
#else //linux

#endif
 
 
//我们在初始化时来申请 buffer 内存，
//并且通过 setp 函数来指定初始 pbase 以及 epptr 指针的位置：
TcpStreamBuf::TcpStreamBuf(SOCKET _socket, size_t _buf_size) :
    buf_size_(_buf_size), socket_(_socket)
{
    assert(buf_size_ > 0);
    pbuf_ = new char[buf_size_];
    setp(pbuf_, pbuf_ + buf_size_);//设置输出指针

    gbuf_ = new char[buf_size_];
    setg(gbuf_, gbuf_, gbuf_);//设置输入指针
}

TcpStreamBuf::~TcpStreamBuf(){
    delete pbuf_;delete gbuf_;
}

//冲刷socket里面的数据
// 构造函数申请一块堆内存 pbuf 作为输出缓冲区，
// 然后调用 setp 函数来设置 buffer 的头指针 pbase 和尾指针 epptr。
// sync 函数强制将已经缓存的数据调用 send 发送出去，也就是刷新到外部设备。
int TcpStreamBuf::sync(){
    int sent =0 ;
    const int total=pptr()-pbase();//可以输出的数据量
    while(sent <total){
        const int ret = send(socket_,pbase()+sent,total-sent,0);
        if(ret >0){sent +=ret;}
        else{return -1;}
    }
    setp(pbase(),pbase()+buf_size_);//重置缓冲区
    pbump(0);//重新设置缓冲区头


    return 0;
}

// 接下来我们看如何定义函数 overflow。
// 注意，overflow是缓冲区满了的时候自动调用的，
// 由于调用 overflow 时当前的缓冲区已经满了，
// 因此 overflow 的参数 c，也就是传入的字符，
// 必须在缓冲区中的数据刷新到外部设备之后才能够放入到 buffer 中，
// 否则 overflow 应该返回 eof。
int TcpStreamBuf::overflow(int c){
    if(sync() == -1){
        return traits_type::eof();
    }
    //在sync后把c压入buf
    if(!traits_type::eq_int_type(c,traits_type::eof())){
        sputc(traits_type::to_char_type(c));
    }
    return traits_type::not_eof(c);
}

// 当缓冲区没有数据时，
// 函数 underflow 将直接从 socket 中读取数据到 gbuf_ 中，
// 然后设置尾指针为 eback() + ret，
// 设置 gptr 为指向数据的第一个字节 eback。
// 同时返回当前可以读取的位置上的数据 *gptr()
int TcpStreamBuf::underflow() {
    const int ret = recv(socket_, eback(), buf_size_, 0);
    if (ret > 0) {
        setg(eback(), eback(), eback() + ret);
        return traits_type::to_int_type(*gptr());
    } else {
        return traits_type::eof();
    }
}


TCPstream::TCPstream(ISocket socket, size_t buf_size) :
    std::iostream(new TcpStreamBuf(socket, buf_size)),
    buf_size_(buf_size),socket_(socket){	}

#pragma endregion Implementation

}// namespace TCP
```

